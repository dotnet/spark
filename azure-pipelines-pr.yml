# Spark .NET build

trigger:
  batch: true
  branches:
    include:
    - main

variables:
  buildConfiguration: 'Release'
  _SignType: real
  _TeamName: DotNetSpark
  MSBUILDSINGLELOADCONTEXT: 1
  ArtifactPath: '$(Build.ArtifactStagingDirectory)\Microsoft.Spark.Binaries'

  backwardCompatibleRelease: '2.0.0'
  forwardCompatibleRelease: '2.0.0'

  backwardCompatibleTestOptions_Windows_2_4: ""
  forwardCompatibleTestOptions_Windows_2_4: ""
  backwardCompatibleTestOptions_Linux_2_4: ""
  forwardCompatibleTestOptions_Linux_2_4: ""

  backwardCompatibleTestOptions_Windows_3_0: ""
  forwardCompatibleTestOptions_Windows_3_0: ""
  backwardCompatibleTestOptions_Linux_3_0: ""
  forwardCompatibleTestOptions_Linux_3_0: ""

  backwardCompatibleTestOptions_Windows_3_1: ""
  forwardCompatibleTestOptions_Windows_3_1: ""
  backwardCompatibleTestOptions_Linux_3_1: ""
  forwardCompatibleTestOptions_Linux_3_1: ""

  # Skip all forward/backward compatibility tests since Spark 3.2 and 3.5 are not supported before this release.
  backwardCompatibleTestOptions_Windows_3_2: "--filter FullyQualifiedName=NONE"
  forwardCompatibleTestOptions_Windows_3_2: $(backwardCompatibleTestOptions_Windows_3_2)
  backwardCompatibleTestOptions_Linux_3_2: $(backwardCompatibleTestOptions_Windows_3_2)
  forwardCompatibleTestOptions_Linux_3_2: $(backwardCompatibleTestOptions_Windows_3_2)

  backwardCompatibleTestOptions_Windows_3_3: "--filter FullyQualifiedName=NONE"
  forwardCompatibleTestOptions_Windows_3_3: $(backwardCompatibleTestOptions_Windows_3_3)
  backwardCompatibleTestOptions_Linux_3_3: $(backwardCompatibleTestOptions_Windows_3_3)
  forwardCompatibleTestOptions_Linux_3_3: $(backwardCompatibleTestOptions_Windows_3_3)
  
  backwardCompatibleTestOptions_Windows_3_5: "--filter FullyQualifiedName=NONE"
  forwardCompatibleTestOptions_Windows_3_5: $(backwardCompatibleTestOptions_Windows_3_5)
  backwardCompatibleTestOptions_Linux_3_5: $(backwardCompatibleTestOptions_Windows_3_5)
  forwardCompatibleTestOptions_Linux_3_5: $(backwardCompatibleTestOptions_Windows_3_5)

  # Azure DevOps variables are transformed into environment variables, with these variables we
  # avoid the first time experience and telemetry to speed up the build.
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

parameters:
# List of Spark versions to run E2E tests
- name: listOfE2ETestsSparkVersions
  type: object
  default:
  - '2.4.0'
  - '2.4.1'
  - '2.4.3'
  - '2.4.4'
  - '2.4.5'
  - '2.4.6'
  - '2.4.7'
  - '2.4.8'
  - '3.0.0'
  - '3.0.1'
  - '3.0.2'
  - '3.1.1'
  - '3.1.2'
  - '3.2.1'
  - '3.2.2'
  - '3.2.3'
  - '3.3.0'
  - '3.3.1'
  - '3.3.2'
  - '3.3.3'
  - '3.3.4'
  - '3.5.0'
  - '3.5.1'
  - '3.5.2'
  - '3.5.3'

# List of OS types to run E2E tests, run each test in both 'Windows' and 'Linux' environments
- name: listOfE2ETestsPoolTypes
  type: object
  default:
  - 'Windows'
  - 'Linux'

resources:
  repositories:
  - repository: forwardCompatibleRelease
    type: github
    endpoint: dotnet.spark
    name: dotnet/spark
    ref: refs/tags/v$(forwardCompatibleRelease)
  
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    settings:
      skipBuildTagsForGitHubPullRequests: true
    sdl:
      spotBugs:
        enabled: false
      PSScriptAnalyzer:
        enabled: false
      credscan:
        enabled: false
      sourceRepositoriesToScan:
        exclude:
          - repository: forwardCompatibleRelease
    pool:
      name: Cosmos2MT-AzureDevOps-AgentPool
      image: 1es-pt-windows-2019
      os: windows
    customBuildTags:
      - ES365AIMigrationTooling
          
    stages:
    - stage: Build
      displayName: Build Sources
      jobs:
      - job: Build
        templateContext:
          outputs:
            - output: pipelineArtifact
              artifactName: Microsoft.Spark.Binaries
              targetPath: $(Build.ArtifactStagingDirectory)
              displayName: '[PUBLISH] Microsoft.Spark.Binaries'

        steps:
        - task: Maven@3
          displayName: 'Maven build src'
          inputs:
            mavenPomFile: src/scala/pom.xml

        - task: Maven@3
          displayName: 'Maven build benchmark'
          inputs:
            mavenPomFile: benchmark/scala/pom.xml

        - script: build.cmd -pack
                    -c $(buildConfiguration)
                    -ci
                    /p:PublishSparkWorker=true
                    /p:SparkWorkerPublishDir=$(Build.ArtifactStagingDirectory)\Microsoft.Spark.Worker
          displayName: '.NET build'

        - task: DotNetCoreCLI@2
          displayName: '.NET unit tests'
          inputs:
            command: test
            projects: '**/*UnitTest/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

        - task: CopyFiles@2
          displayName: Stage Maven build jars
          inputs:
            sourceFolder: $(Build.SourcesDirectory)/src/scala
            contents: '**/*.jar'
            targetFolder: $(Build.ArtifactStagingDirectory)/Jars

    - template: azure-pipelines-e2e-tests-template.yml
      parameters:
        backwardCompatibleRelease: $(backwardCompatibleRelease)
        forwardCompatibleRelease: $(forwardCompatibleRelease)
        tests:
        - ${{ each version in parameters.listOfE2ETestsSparkVersions }} :
          - version: ${{ version }}
            # Set compatible test to false for all test currently,
            # will need to refactor and update values in parameter if need to enalbe it per version.
            enableForwardCompatibleTests: false
            enableBackwardCompatibleTests: false
            jobOptions:
            - ${{ each pool in parameters.listOfE2ETestsPoolTypes }}:
              - pool: ${{ pool }}
                backwardCompatibleTestOptions: $(backwardCompatibleTestOptions_${{ pool }}_${{ split(version, '.')[0] }}_${{ split(version, '.')[1] }})
                forwardCompatibleTestOptions: $(forwardCompatibleTestOptions_${{ pool }}_${{ split(version, '.')[0] }}_${{ split(version, '.')[1] }})
