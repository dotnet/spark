# Spark .NET build

trigger:
  batch: true
  branches:
    include:
    - main

variables:
  buildConfiguration: 'Release'
  _SignType: real
  _TeamName: DotNetSpark
  MSBUILDSINGLELOADCONTEXT: 1
  ArtifactPath: '$(Build.ArtifactStagingDirectory)\Microsoft.Spark.Binaries'
  CodeSign: $(CodeSign)

  backwardCompatibleRelease: '2.0.0'
  forwardCompatibleRelease: '2.0.0'

  # Azure DevOps variables are transformed into environment variables, with these variables we
  # avoid the first time experience and telemetry to speed up the build.
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

resources:
  repositories:
  - repository: forwardCompatibleRelease
    type: github
    endpoint: dotnet.spark
    name: dotnet/spark
    ref: refs/tags/v$(forwardCompatibleRelease)
  
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    settings:
      skipBuildTagsForGitHubPullRequests: true
    sdl:
      spotBugs:
        enabled: false
      PSScriptAnalyzer:
        enabled: false
      credscan:
        enabled: false
      sourceRepositoriesToScan:
        exclude:
          - repository: forwardCompatibleRelease
    pool:
      name: Cosmos2MT-AzureDevOps-AgentPool
      image: 1es-pt-windows-2019
      os: windows
    customBuildTags:
      - ES365AIMigrationTooling
          
    stages:
    - stage: Build
      displayName: Build Sources
      jobs:
      - job: Build
        templateContext:
          outputs:
            - output: pipelineArtifact
              artifactName: DotnetSpark
              targetPath: $(ArtifactPath)\Output
              displayName: '[PUBLISH] Spark.Net Artifact'

        variables:
              ? ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}
              : _OfficialBuildIdArgs: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

        steps:
        - task: Maven@3
          displayName: 'Maven build src'
          inputs:
            mavenPomFile: src/scala/pom.xml

        - task: Maven@3
          displayName: 'Maven build benchmark'
          inputs:
            mavenPomFile: benchmark/scala/pom.xml

        # - script: build.cmd -pack
        #             -c $(buildConfiguration)
        #             -ci
        #             /p:Version=$(NugetVersion)
        #             /p:PublishSparkWorker=true
        #             /p:SparkWorkerPublishDir=$(Build.ArtifactStagingDirectory)\Microsoft.Spark.Worker
        #             /p:SparkWorkerPackageOutputDir=$(Build.ArtifactStagingDirectory)
        #             /property:Platform=x64
        #   displayName: '.NET build'

        - task: PowerShell@2
          displayName: "Set build parameter for package version"
          inputs:
            targetType: "inline"
            script: |
              $packageVersionArg = "$(_OfficialBuildIdArgs)"
              if (-not [string]::IsNullOrEmpty("$(NugetVersion)")) {
                $packageVersionArg = "/p:Version=$(NugetVersion)"
              }
              Write-Host "##vso[task.setvariable variable=PackageVersionArg]$packageVersionArg"

        - script: build.cmd -pack
                  -c $(buildConfiguration)
                  -ci
                  $(PackageVersionArg)
                  /p:PublishSparkWorker=true
                  /p:SparkWorkerPublishDir=$(ArtifactPath)\Microsoft.Spark.Worker
                  /p:SparkWorkerPackageOutputDir=$(ArtifactPath)
                  /p:MicrosoftDiaSymReaderPdb2PdbVersion=1.1.0-beta1-62506-02
                  /property:Platform=x64
          displayName: "[BUILD] .NET Build"
        
        - script: |
            cd $(ArtifactPath)
            dir /B /S
          displayName: '[TEMP] Print ArtifactPath'

        - script: |
            cd $(Build.ArtifactStagingDirectory)
            dir /B /S
          displayName: '[TEMP] Print Build.ArtifactStagingDirectory'

        - task: EsrpCodeSigning@5
          condition: eq(variables.CodeSign, 'true')
          inputs:
            ConnectedServiceName: $(ConnectedServiceName)
            AppRegistrationClientId: $(AppRegistrationClientId)
            AppRegistrationTenantId: $(AppRegistrationTenantId)
            EsrpClientId: $(EsrpClientId)
            UseMSIAuthentication: true
            AuthAKVName: $(AuthAKVName)
            AuthSignCertName: $(AuthSignCertName)
            FolderPath: '$(Build.ArtifactStagingDirectory)\Microsoft.Spark.Worker'
            Pattern: '*.dll,*.exe'
            OpusName: 'Microsoft'
            OpusInfo: 'http://www.microsoft.com'
            SessionTimeout: '60'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'
            PendingAnalysisWaitTimeoutMinutes: '5'
            inlineOperation: |
              [
                {
                  "KeyCode": "CP-231522",
                  "OperationCode": "SigntoolSign",
                  "ToolName": "sign",
                  "ToolVersion": "1.0",
                  "Parameters": {
                  "OpusName": "Microsoft",
                  "OpusInfo": "https://www.microsoft.com",
                  "FileDigest": "/fd SHA256",
                  "PageHash": "/NPH",
                  "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                  }
                },
                {
                  "KeyCode": "CP-231522",
                  "OperationCode": "SigntoolVerify",
                  "ToolName": "sign",
                  "ToolVersion": "1.0",
                  "Parameters": {}
                }
              ]
          
        - task: PowerShell@2
          displayName: "Pack Spark Worker Zip"
          inputs:
            targetType: "inline"
            script: |
              $binaryFolder48 = "$(ArtifactPath)\Microsoft.Spark.Worker\net48"
              # Generate .zip format file for .net48
              Rename-Item -Path "$binaryFolder48\win-x64" -NewName "Microsoft.Spark.Worker-$(DotnetPackageVersion)"
              $archiveFile48_zip = "$binaryFolder48\Microsoft.Spark.Worker.net48.win-x64-$(DotnetPackageVersion).zip"
              Compress-Archive -Path $binaryFolder48\Microsoft.Spark.Worker-$(DotnetPackageVersion) -DestinationPath $archiveFile48_zip
              $binaryFolder8 = "$(ArtifactPath)\Microsoft.Spark.Worker\net8.0"
              # Generate .zip format file for .net8
              Rename-Item -Path "$binaryFolder8\win-x64" -NewName "Microsoft.Spark.Worker-$(DotnetPackageShortVersion)"
              $archiveFile8_zip = "$binaryFolder8\Microsoft.Spark.Worker.net8.0.win-x64-$(DotnetPackageVersion).zip"
              Compress-Archive -Path $binaryFolder8\Microsoft.Spark.Worker-$(DotnetPackageShortVersion) -DestinationPath $archiveFile8_zip

        - task: CopyFiles@2
          displayName: '[COPY] Spark.Net .net48 worker archive -> $(ArtifactPath)/Output'
          inputs:
            SourceFolder: '$(ArtifactPath)\Microsoft.Spark.Worker\net48'
            Contents: '*.zip'
            TargetFolder: '$(ArtifactPath)\Output'

        - task: CopyFiles@2
          displayName: '[COPY] Spark.Net .net8 worker archive -> $(ArtifactPath)/Output'
          inputs:
            SourceFolder: '$(ArtifactPath)\Microsoft.Spark.Worker\net8.0'
            Contents: '*.zip'
            TargetFolder: '$(ArtifactPath)\Output'

        - script: |
            cd $(ArtifactPath)
            dir /B /S
          displayName: '[TEMP] Print ArtifactPath'

        - script: |
            cd $(Build.SourcesDirectory)
            dir /B /S
          displayName: '[TEMP] Print SourcesDirectory'
